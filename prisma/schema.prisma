// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================
// USER & AUTH MODELS
// ============================================================

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  addresses Address[]
  orders    Order[]
  
  @@map("users")
}

model Address {
  id           String   @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean  @default(false)
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("addresses")
}

// ============================================================
// CATALOG MODELS
// ============================================================

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
  
  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  image       String
  isAvailable Boolean   @default(true)
  ingredients String[]
  
  // Nutritional Info (embedded)
  calories       Int
  proteins       Float
  carbohydrates  Float
  fats           Float
  fiber          Float
  
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  orderItems  OrderItem[]
  
  @@map("products")
}

// ============================================================
// RESTAURANT SETTINGS
// ============================================================

enum StoreType {
  DELIVERY_ONLY
  DINE_IN_ONLY
  HYBRID
}

model RestaurantSettings {
  id              String    @id @default(uuid())
  name            String
  
  // Address
  street          String
  number          String
  complement      String?
  neighborhood    String
  city            String
  state           String
  zipCode         String
  
  // Store Type
  storeType       StoreType @default(HYBRID)
  
  // Operating Hours (JSON format)
  // Example: {"monday": {"open": "11:00", "close": "23:00"}, ...}
  operatingHours  Json
  
  // Contact
  phone           String?
  email           String?
  
  // Delivery Settings
  deliveryFee     Float     @default(0)
  minDeliveryValue Float    @default(0)
  
  // Service Fee (for dine-in)
  serviceFeePercent Float   @default(10)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("restaurant_settings")
}

// ============================================================
// TABLE MANAGEMENT
// ============================================================

model Table {
  id        String   @id @default(uuid())
  number    Int      @unique
  capacity  Int
  location  String?
  isActive  Boolean  @default(true)
  
  orders    Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tables")
}

// ============================================================
// ORDER MODELS
// ============================================================

enum OrderType {
  DELIVERY
  DINE_IN
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  CASH
}

model Order {
  id            String        @id @default(uuid())
  
  // Order Type (Delivery or Dine-in)
  orderType     OrderType     @default(DELIVERY)
  
  status        OrderStatus   @default(PENDING)
  
  // Customer Info
  customerName  String
  customerEmail String
  customerPhone String
  
  // Delivery Address (optional - only for DELIVERY orders)
  deliveryStreet       String?
  deliveryNumber       String?
  deliveryComplement   String?
  deliveryNeighborhood String?
  deliveryCity         String?
  deliveryState        String?
  deliveryZipCode      String?
  
  // Delivery Fee (only for DELIVERY orders)
  deliveryFee   Float         @default(0)
  
  // Table (optional - only for DINE_IN orders)
  tableId       String?
  table         Table?        @relation(fields: [tableId], references: [id], onDelete: SetNull)
  
  // Service Fee (only for DINE_IN orders)
  includeService Boolean      @default(false)
  serviceFee     Float        @default(0)
  
  // Totals
  subtotal      Float
  total         Float         // subtotal + deliveryFee (delivery) OR subtotal + serviceFee (dine-in)
  
  // Notes
  notes         String?
  
  // Relations
  userId        String?
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  items         OrderItem[]
  payments      Payment[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("orders")
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float
  paymentMethod PaymentMethod
  notes         String?
  isPaid        Boolean       @default(true)
  
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime      @default(now())
  
  @@map("payments")
}

model OrderItem {
  id         String   @id @default(uuid())
  quantity   Int
  price      Float    // Price at the time of order
  
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  
  createdAt  DateTime @default(now())
  
  @@map("order_items")
}

// ============================================================
// DELIVERY SETTINGS
// ============================================================

model DeliverySettings {
  id                    String              @id @default(uuid())
  
  // Store Address
  storeStreet           String
  storeNumber           String
  storeComplement       String?
  storeNeighborhood     String
  storeCity             String
  storeState            String
  storeZipCode          String
  
  // Delivery Configuration
  deliveryType          DeliveryType        @default(FIXED)
  fixedCost             Float               @default(0)
  costPerKm             Float               @default(0)
  freeDeliveryMinValue  Float?              // Minimum order value for free delivery
  
  // Pickup Option
  allowPickup           Boolean             @default(true)
  
  // Status
  isActive              Boolean             @default(true)
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@map("delivery_settings")
}

enum DeliveryType {
  FIXED              // Fixed cost
  VARIABLE           // Cost per km
  FIXED_PLUS_KM      // Fixed + cost per km
  FREE_ABOVE_VALUE   // Free for orders above certain value
}

